/*
 * Copyright 2016 Sai Pullabhotla.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.jmethods.catatumbo.impl;

import com.jmethods.catatumbo.EntityManagerException;
import java.lang.reflect.Field;

/**
 * Objects of this class contain metadata about identifier field of an entity.
 *
 * @author Sai Pullabhotla
 */
public class IdentifierMetadata extends FieldMetadata {

  /** Data type of the identifier */
  private final DataType dataType;
  /** Metadata of the ID Class */
  private final IdClassMetadata idClassMetadata;
  /** If identifier is to be auto generated or not */
  private boolean autoGenerated;

  /**
   * Creates a new instance of <code>IdentifierMetadata</code>.
   *
   * @param field the field
   * @param autoGenerated if the identifier is to be generated automatically
   */
  public IdentifierMetadata(Field field, boolean autoGenerated) {
    super(field);
    this.autoGenerated = autoGenerated;
    DataType dataType = DataType.forClass(field.getType());
    if (dataType == null) {
      idClassMetadata = new IdClassMetadata(getDeclaredType());
      dataType = DataType.forClass(idClassMetadata.getIdType());
    } else {
      idClassMetadata = null;
    }
    if (dataType == null) {
      String message =
          String.format(
              "Invalid identifier type %s for field %s in class %s",
              field.getType().getName(), field.getName(), field.getDeclaringClass().getName());
      throw new EntityManagerException(message);
    }
    this.dataType = dataType;
  }

  /**
   * Tells whether or not the identifier is to be generated automatically.
   *
   * @return true, if the identifier is to be generated automatically; false, otherwise.
   */
  public boolean isAutoGenerated() {
    return autoGenerated;
  }

  /**
   * Sets whether or not the identifier is to be generated automatically.
   *
   * @param autoGenerated whether or not the identifier is to be generated automatically.
   */
  public void setAutoGenerated(boolean autoGenerated) {
    this.autoGenerated = autoGenerated;
  }

  /**
   * Returns the type of the ID.
   *
   * @return the type of the ID.
   */
  public DataType getDataType() {
    return dataType;
  }

  /**
   * Returns the metadata of the ID class, if any.
   *
   * @return the idClassMetadata the metadata of the ID class, if any. Returns <code>null</code>, if
   *     the Entity has a simple ID (long, Long or String).
   */
  public IdClassMetadata getIdClassMetadata() {
    return idClassMetadata;
  }

  /**
   * Valid identifier types.
   *
   * @author Sai Pullabhotla
   */
  public enum DataType {
    /** Primitive long */
    LONG(long.class),
    /** Wrapper Long */
    LONG_OBJECT(Long.class),
    /** String */
    STRING(String.class);

    /** Data class */
    private final Class<?> dataClass;

    /**
     * Creates a new instance of <code>DataType</code>.
     *
     * @param dataClass the type/class for the data type
     */
    DataType(Class<?> dataClass) {
      this.dataClass = dataClass;
    }

    /**
     * Returns the DataType for the given class.
     *
     * @param dataClass the class
     * @return the DataType for the given class.
     */
    public static DataType forClass(Class<?> dataClass) {
      for (DataType dataType : DataType.values()) {
        if (dataType.dataClass.equals(dataClass)) {
          return dataType;
        }
      }
      return null;
    }
  }
}
